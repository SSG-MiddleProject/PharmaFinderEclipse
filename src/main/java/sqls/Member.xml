<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Member">
    <resultMap id="BaseResultMap" type="ssg.middlepj.pharmafinder.dto.MemberDto">
        <id property="id" column="id" jdbcType="INTEGER"/>
        <result property="storeId" column="store_id" jdbcType="INTEGER"/>
        <result property="username" column="username" jdbcType="VARCHAR"/>
        <result property="email" column="email" jdbcType="VARCHAR"/>
        <result property="password" column="password" jdbcType="VARCHAR"/>
        <result property="state" column="state" jdbcType="TINYINT"/>
        <result property="roll" column="roll" jdbcType="TINYINT"/>
        <result property="createdAt" column="created_at" jdbcType="TIMESTAMP"/>
        <result property="modifiedAt" column="modified_at" jdbcType="TIMESTAMP"/>
    </resultMap>

    <select id="usernamecheck" parameterType="String" resultType="Integer">
        select count(*)
        from user
        where username = #{username}
    </select>
    
    <select id="findUsernameByEmail" parameterType="string" resultType="string">
        select username from user where email = #{email}
    </select>
    
    <update id="updateTemporaryPassword" parameterType="map">
        update user
        set password = #{temporaryPassword}
        where username = #{username} 
        and email = #{email}
    </update>
    
    <update id="updatePasswordWithTemporary" parameterType="map">
	    UPDATE user
	    SET password = #{newPassword}
	    WHERE username = #{username}
	    AND password = #{temporaryPassword}
	</update>
    
    <select id="emailcheck" parameterType="String" resultType="Integer">
        select count(*)
        from user
        where email = #{email}
    </select>
    
    <!-- 로그인Af  -->
    <select id="login" parameterType="map" resultType="ssg.middlepj.pharmafinder.dto.MemberDto">
        select id, store_id as 'storeId', username, email, state, roll, created_at as 'createdAt', modified_at as 'modifiedAt'
        from user
        where username = #{username}
        	and password = #{password}
    </select>

    <!-- 사용자 정보 조회 -->
	<select id="findMemberByUsername" parameterType="string" resultMap="BaseResultMap">
	    SELECT id, username, email, password, state, roll, created_at AS createdAt, modified_at AS modifiedAt
	    FROM user
	    WHERE username = #{username}
	</select>

    <!--
    	email unique key 체크 / notnull 체크안됨 -> 한명은 null값으로 가입가능 그뒤는 안됨
    	밑에방법은 내가 일반사용자용으로만 가입시킬때 그리고 약국 관리자로 사용할때 따로 insert문을 두개 만들어야함
    	values(#{username}, #{email}, #{password}, 1, 2, now(), now())
    	밑에방법은 두가지 가입방법을 하나의 insert문으로 만들었을때 dto.getStoreId -> null 그래서 크게 상관없음
    	values(#{storeId}, #{username}, #{email}, #{password}, 1, ${roll}, now(), now())
   	-->
    <insert id="addmember" parameterType="ssg.middlepj.pharmafinder.dto.MemberDto" useGeneratedKeys="true" keyProperty="id">
        insert into user(store_id, username, email, password, state, roll)
        values (#{storeId}, #{username}, #{email}, #{password}, 1, #{roll})
    </insert>

    <!-- store 테이블 추가 -->
    <insert id="addpharmacy" parameterType="ssg.middlepj.pharmafinder.dto.PharmacyDto" useGeneratedKeys="true" keyProperty="id">
        insert into store (dutyName, dutyAddr, dutyTel1, bn_reg_num, dutyTime1s, dutyTime1c, dutyTime2s,
                           dutyTime2c, dutyTime3s, dutyTime3c, dutyTime4s, dutyTime4c, dutyTime5s, dutyTime5c,
                           dutyTime6s, dutyTime6c, dutyTime7s, dutyTime7c, dutyTime8s, dutyTime8c, postcode)
        VALUES (#{dutyName}, #{dutyAddr}, #{dutyTel1}, #{bnRegNum}, #{dutyTime1s}, #{dutyTime1c},
                #{dutyTime2s}, #{dutyTime2c}, #{dutyTime3s}, #{dutyTime3c}, #{dutyTime4s}, #{dutyTime4c}, #{dutyTime5s},
                #{dutyTime5c}, #{dutyTime6s}, #{dutyTime6c}, #{dutyTime7s}, #{dutyTime7c}, #{dutyTime8s}, #{dutyTime8c}, #{postcode})
    </insert>

    <update id="updateMember" parameterType="ssg.middlepj.pharmafinder.dto.MemberDto">
    UPDATE user
    SET
        email = #{email},
        password = #{password}
        <!-- 필요한 추가 필드를 여기에 추가하세요 -->
    WHERE username = #{username}
	</update>
</mapper>